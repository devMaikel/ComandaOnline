// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  password          String
  name              String?
  phone             String?
  passwordToken     String?
  tokenSentAt       DateTime?
  role              UserRole
  bars              Bar[]         @relation("OwnerBars")
  ownerId           String?          
  owner             User?         @relation("WaiterOwner", fields: [ownerId], references: [id])
  waiters           User[]        @relation("WaiterOwner")
  commandsOpened    Command[]     @relation("CommandOpenedBy")
  commandsClosed    Command[]     @relation("CommandClosedBy")
  commandItemAdded  CommandItem[] @relation("CommandItemAddedBy")
  payments          Payment[]     @relation("PaymentRegisteredBy")
  tips              Tip[]        @relation("TipsOwner")
  deletedAt         DateTime?
}

model Bar {
  id       String   @id @default(uuid())
  name     String
  owner    User     @relation("OwnerBars", fields: [ownerId], references: [id])
  ownerId  String

  itens    MenuItem[]
  tables   Table[]
  commands Command[]
  deletedAt DateTime?
}

model MenuItem {
  id        String @id @default(uuid())
  name      String
  price     Float
  bar       Bar    @relation(fields: [barId], references: [id])
  barId     String
  deletedAt DateTime?

  CommandItem CommandItem[]
}

model Table {
  id     String @id @default(uuid())
  number Int
  bar    Bar    @relation(fields: [barId], references: [id])
  barId  String
  deletedAt DateTime?

  Command Command[]
}

model Command {
  id              String         @id @default(uuid())
  table           Table          @relation(fields: [tableId], references: [id])
  tableId         String
  bar             Bar            @relation(fields: [barId], references: [id])
  barId           String
  openedBy        User           @relation("CommandOpenedBy", fields: [openedById], references: [id])
  openedById      String
  closedBy        User?          @relation("CommandClosedBy", fields: [closedById], references: [id])
  closedById      String?
  status          CommandStatus
  name            String?
  notes           String?
  publicHash      String         @unique
  items           CommandItem[]
  tips            Tip[]          @relation("TipsToCommand")
  total           Float          @default(0)
  payments        Payment[]      @relation("CommandPaid")
  paidAmount      Float          @default(0)
  remainingAmount Float          @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?
}

model Tip {
  id        String  @id @default(uuid())
  amount    Float   @default(0)
  note      String?
  user      User    @relation("TipsOwner", fields: [userId], references: [id])
  userId    String
  command   Command @relation("TipsToCommand", fields: [commandId], references: [id])
  commandId String
}

model Payment {
  id          String   @id @default(uuid())
  command     Command  @relation("CommandPaid", fields: [commandId], references: [id])
  commandId   String
  amount      Float
  note        String?
  paymentType PaymentType @default(CASH)
  paidBy      User?     @relation("PaymentRegisteredBy", fields: [paidById], references: [id])
  paidById    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommandItem {
  id            String      @id @default(uuid())
  command       Command     @relation(fields: [commandId], references: [id])
  commandId     String
  menuItem      MenuItem    @relation(fields: [menuItemId], references: [id])
  menuItemId    String
  quantity      Int
  notes         String?
  addedBy       User           @relation("CommandItemAddedBy", fields: [addedById], references: [id])
  addedById     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

enum UserRole {
  OWNER
  WAITER
  MANAGER
}

enum CommandStatus {
  OPEN
  CLOSED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  OTHER
}